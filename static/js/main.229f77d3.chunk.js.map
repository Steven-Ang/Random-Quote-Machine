{"version":3,"sources":["components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["App","state","quote","author","getNewQuote","axios","get","then","res","_this","setState","data","quoteText","quoteAuthor","catch","err","alert","this","_this$state","twitterLink","concat","react_default","a","createElement","id","className","href","target","rel","role","onClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","ReactDOM","render","components_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sPAEeA,6MCEbC,MAAQ,CACNC,MAAO,GACPC,OAAQ,MAOVC,YAAc,WACZC,IAAMC,IAAI,kCACTC,KAAK,SAAAC,GACJC,EAAKC,SAAS,CACZR,MAAOM,EAAIG,KAAKC,UAChBT,OAAQK,EAAIG,KAAKE,gBAGpBC,MAAM,SAAAC,GACLC,MAAMD,yFAZRE,KAAKb,+CAgBE,IAAAc,EACiBD,KAAKhB,MAAtBC,EADAgB,EACAhB,MAAOC,EADPe,EACOf,OACRgB,EAAW,0CAAAC,OAA6ClB,EAA7C,SAAAkB,OAA0DjB,EAA1D,KACjB,OACEkB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAYC,UAAU,aAC5BJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,MAAIC,GAAG,QAAQP,KAAKhB,MAAMC,OAC1BmB,EAAAC,EAAAC,cAAA,MAAIC,GAAG,UAAP,UAAwBH,EAAAC,EAAAC,cAAA,UAAKN,KAAKhB,MAAME,SACxCkB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,KAAGG,KAAMP,EAAaQ,OAAO,SAASC,IAAI,sBAAsBC,KAAK,SAASL,GAAG,cAAcC,UAAU,uBAAzG,oBAEFJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYC,UAAU,qCAAqCK,QAASb,KAAKb,aAApF,4BApCmB2B,aCS3BC,SAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACThC,KAAK,SAAAqC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7C,QACfwC,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,UAO5B9B,MAAM,SAAAwC,GACLJ,QAAQI,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,wBAAwB3B,OAAOC,SAAST,MACpDoC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,GAAAnB,OAAMyC,wBAAN,sBAEP7B,GAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,GACHhC,KAAK,SAAA0D,GAEJ,IAAMC,EAAcD,EAASE,QAAQ7D,IAAI,gBAEnB,MAApB2D,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM/D,KAAK,SAAAqC,GACjCA,EAAa2B,aAAahE,KAAK,WAC7B2B,OAAOC,SAASqC,aAKpBlC,EAAgBC,EAAOC,KAG1B1B,MAAM,WACLoC,QAAQC,IACN,mEArFAsB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM/D,KAAK,WACjC2C,QAAQC,IACN,gHAMJb,EAAgBC,EAAOC,MC1C/BE","file":"static/js/main.229f77d3.chunk.js","sourcesContent":["import App from './App';\n\nexport default App;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport default class App extends Component {\n  state = {\n    quote: '',\n    author: '',\n  }\n\n  componentDidMount() {\n    this.getNewQuote();\n  }\n\n  getNewQuote = () => {\n    axios.get(\"https://quota.glitch.me/random\")\n    .then(res => {\n      this.setState({\n        quote: res.data.quoteText,\n        author: res.data.quoteAuthor\n      })\n    })\n    .catch(err => {\n      alert(err);\n    });\n  }\n\n  render() {\n    const {quote, author} = this.state;\n    const twitterLink = `https://twitter.com/intent/tweet?text=\"${quote}\" by ${author}.`\n    return (\n      <div id=\"quote-box\" className=\"container\">\n        <div className=\"center\">\n          <h4 id=\"text\">{this.state.quote}</h4>\n          <h5 id=\"author\">&mdash; <em>{this.state.author}</em></h5>\n          <div className=\"row pt-2\">\n            <div className=\"col-md-8\">\n              <a href={twitterLink} target=\"_blank\" rel=\"noopener noreferrer\" role=\"button\" id=\"tweet-quote\" className=\"btn btn-info btn-lg\">Tweet The Quote</a>\n            </div>\n            <div className=\"col-md-4\">\n              <button id=\"new-quote\" className=\"btn btn-secondary btn-lg btn-block\" onClick={this.getNewQuote}>Get New Quote</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}